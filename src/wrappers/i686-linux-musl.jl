# Autogenerated wrapper script for X11_jll for i686-linux-musl
export libXext, libxcb_shm, libxcb_render, libX11, libX11_xcb, libXau

## Global variables
PATH = ""
LIBPATH = ""
LIBPATH_env = "LD_LIBRARY_PATH"

# Relative path to `libXext`
const libXext_splitpath = ["lib", "libXext.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libXext_path = ""

# libXext-specific global declaration
# This will be filled out by __init__()
libXext_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libXext = "libXext.so.6"


# Relative path to `libxcb_shm`
const libxcb_shm_splitpath = ["lib", "libxcb-shm.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libxcb_shm_path = ""

# libxcb_shm-specific global declaration
# This will be filled out by __init__()
libxcb_shm_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libxcb_shm = "libxcb-shm.so.0"


# Relative path to `libxcb_render`
const libxcb_render_splitpath = ["lib", "libxcb-render.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libxcb_render_path = ""

# libxcb_render-specific global declaration
# This will be filled out by __init__()
libxcb_render_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libxcb_render = "libxcb-render.so.0"


# Relative path to `libX11`
const libX11_splitpath = ["lib", "libX11.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libX11_path = ""

# libX11-specific global declaration
# This will be filled out by __init__()
libX11_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libX11 = "libX11.so.6"


# Relative path to `libX11_xcb`
const libX11_xcb_splitpath = ["lib", "libX11-xcb.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libX11_xcb_path = ""

# libX11_xcb-specific global declaration
# This will be filled out by __init__()
libX11_xcb_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libX11_xcb = "libX11-xcb.so.1"


# Relative path to `libXau`
const libXau_splitpath = ["lib", "libXau.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libXau_path = ""

# libXau-specific global declaration
# This will be filled out by __init__()
libXau_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libXau = "libXau.so.6"


"""
Open all libraries
"""
function __init__()
    global prefix = abspath(joinpath(@__DIR__, ".."))

    # Initialize PATH and LIBPATH environment variable listings
    global PATH_list, LIBPATH_list
    global libXext_path = abspath(joinpath(artifact"X11", libXext_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libXext_handle = dlopen(libXext_path)
    push!(LIBPATH_list, dirname(libXext_path))

    global libxcb_shm_path = abspath(joinpath(artifact"X11", libxcb_shm_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libxcb_shm_handle = dlopen(libxcb_shm_path)
    push!(LIBPATH_list, dirname(libxcb_shm_path))

    global libxcb_render_path = abspath(joinpath(artifact"X11", libxcb_render_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libxcb_render_handle = dlopen(libxcb_render_path)
    push!(LIBPATH_list, dirname(libxcb_render_path))

    global libX11_path = abspath(joinpath(artifact"X11", libX11_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libX11_handle = dlopen(libX11_path)
    push!(LIBPATH_list, dirname(libX11_path))

    global libX11_xcb_path = abspath(joinpath(artifact"X11", libX11_xcb_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libX11_xcb_handle = dlopen(libX11_xcb_path)
    push!(LIBPATH_list, dirname(libX11_xcb_path))

    global libXau_path = abspath(joinpath(artifact"X11", libXau_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libXau_handle = dlopen(libXau_path)
    push!(LIBPATH_list, dirname(libXau_path))

    # Filter out duplicate and empty entries in our PATH and LIBPATH entries
    filter!(!isempty, unique!(PATH_list))
    filter!(!isempty, unique!(LIBPATH_list))
    global PATH = join(PATH_list, ':')
    global LIBPATH = join(LIBPATH_list, ':')

    # Add each element of LIBPATH to our DL_LOAD_PATH (necessary on platforms
    # that don't honor our "already opened" trick)
    #for lp in LIBPATH_list
    #    push!(DL_LOAD_PATH, lp)
    #end
end  # __init__()

