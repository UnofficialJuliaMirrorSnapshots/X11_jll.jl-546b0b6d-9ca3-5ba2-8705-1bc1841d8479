# Autogenerated wrapper script for X11_jll for x86_64-linux-musl
export libxcb_glx, libxshmfence, libxcb, libxcb_dpms, libxcb_xf86dri, libxcb_screensaver, libX11, libXcursor, libxcb_xtest, libxcb_randr, libxcb_dri2, libxcb_xvmc, libxcb_xv, libXau, libXi, libXdamage, libxcb_present, libxcb_sync, libxcb_damage, libXext, libxcb_res, libxcb_shape, libxcb_composite, libxcb_dri3, libxcb_render, libXrender, libX11_xcb, libxcb_xinput, libXinerama, libxcb_xkb, libXrandr, libxcb_xfixes, libXcomposite, libxcb_record, libXtst, libxcb_shm, libxcb_xinerama, libXfixes

## Global variables
PATH = ""
LIBPATH = ""
LIBPATH_env = "LD_LIBRARY_PATH"

# Relative path to `libxcb_glx`
const libxcb_glx_splitpath = ["lib", "libxcb-glx.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libxcb_glx_path = ""

# libxcb_glx-specific global declaration
# This will be filled out by __init__()
libxcb_glx_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libxcb_glx = "libxcb-glx.so.0"


# Relative path to `libxshmfence`
const libxshmfence_splitpath = ["lib", "libxshmfence.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libxshmfence_path = ""

# libxshmfence-specific global declaration
# This will be filled out by __init__()
libxshmfence_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libxshmfence = "libxshmfence.so.1"


# Relative path to `libxcb`
const libxcb_splitpath = ["lib", "libxcb.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libxcb_path = ""

# libxcb-specific global declaration
# This will be filled out by __init__()
libxcb_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libxcb = "libxcb.so.1"


# Relative path to `libxcb_dpms`
const libxcb_dpms_splitpath = ["lib", "libxcb-dpms.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libxcb_dpms_path = ""

# libxcb_dpms-specific global declaration
# This will be filled out by __init__()
libxcb_dpms_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libxcb_dpms = "libxcb-dpms.so.0"


# Relative path to `libxcb_xf86dri`
const libxcb_xf86dri_splitpath = ["lib", "libxcb-xf86dri.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libxcb_xf86dri_path = ""

# libxcb_xf86dri-specific global declaration
# This will be filled out by __init__()
libxcb_xf86dri_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libxcb_xf86dri = "libxcb-xf86dri.so.0"


# Relative path to `libxcb_screensaver`
const libxcb_screensaver_splitpath = ["lib", "libxcb-screensaver.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libxcb_screensaver_path = ""

# libxcb_screensaver-specific global declaration
# This will be filled out by __init__()
libxcb_screensaver_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libxcb_screensaver = "libxcb-screensaver.so.0"


# Relative path to `libX11`
const libX11_splitpath = ["lib", "libX11.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libX11_path = ""

# libX11-specific global declaration
# This will be filled out by __init__()
libX11_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libX11 = "libX11.so.6"


# Relative path to `libXcursor`
const libXcursor_splitpath = ["lib", "libXcursor.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libXcursor_path = ""

# libXcursor-specific global declaration
# This will be filled out by __init__()
libXcursor_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libXcursor = "libXcursor.so.1"


# Relative path to `libxcb_xtest`
const libxcb_xtest_splitpath = ["lib", "libxcb-xtest.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libxcb_xtest_path = ""

# libxcb_xtest-specific global declaration
# This will be filled out by __init__()
libxcb_xtest_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libxcb_xtest = "libxcb-xtest.so.0"


# Relative path to `libxcb_randr`
const libxcb_randr_splitpath = ["lib", "libxcb-randr.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libxcb_randr_path = ""

# libxcb_randr-specific global declaration
# This will be filled out by __init__()
libxcb_randr_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libxcb_randr = "libxcb-randr.so.0"


# Relative path to `libxcb_dri2`
const libxcb_dri2_splitpath = ["lib", "libxcb-dri2.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libxcb_dri2_path = ""

# libxcb_dri2-specific global declaration
# This will be filled out by __init__()
libxcb_dri2_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libxcb_dri2 = "libxcb-dri2.so.0"


# Relative path to `libxcb_xvmc`
const libxcb_xvmc_splitpath = ["lib", "libxcb-xvmc.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libxcb_xvmc_path = ""

# libxcb_xvmc-specific global declaration
# This will be filled out by __init__()
libxcb_xvmc_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libxcb_xvmc = "libxcb-xvmc.so.0"


# Relative path to `libxcb_xv`
const libxcb_xv_splitpath = ["lib", "libxcb-xv.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libxcb_xv_path = ""

# libxcb_xv-specific global declaration
# This will be filled out by __init__()
libxcb_xv_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libxcb_xv = "libxcb-xv.so.0"


# Relative path to `libXau`
const libXau_splitpath = ["lib", "libXau.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libXau_path = ""

# libXau-specific global declaration
# This will be filled out by __init__()
libXau_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libXau = "libXau.so.6"


# Relative path to `libXi`
const libXi_splitpath = ["lib", "libXi.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libXi_path = ""

# libXi-specific global declaration
# This will be filled out by __init__()
libXi_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libXi = "libXi.so.6"


# Relative path to `libXdamage`
const libXdamage_splitpath = ["lib", "libXdamage.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libXdamage_path = ""

# libXdamage-specific global declaration
# This will be filled out by __init__()
libXdamage_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libXdamage = "libXdamage.so.1"


# Relative path to `libxcb_present`
const libxcb_present_splitpath = ["lib", "libxcb-present.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libxcb_present_path = ""

# libxcb_present-specific global declaration
# This will be filled out by __init__()
libxcb_present_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libxcb_present = "libxcb-present.so.0"


# Relative path to `libxcb_sync`
const libxcb_sync_splitpath = ["lib", "libxcb-sync.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libxcb_sync_path = ""

# libxcb_sync-specific global declaration
# This will be filled out by __init__()
libxcb_sync_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libxcb_sync = "libxcb-sync.so.1"


# Relative path to `libxcb_damage`
const libxcb_damage_splitpath = ["lib", "libxcb-damage.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libxcb_damage_path = ""

# libxcb_damage-specific global declaration
# This will be filled out by __init__()
libxcb_damage_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libxcb_damage = "libxcb-damage.so.0"


# Relative path to `libXext`
const libXext_splitpath = ["lib", "libXext.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libXext_path = ""

# libXext-specific global declaration
# This will be filled out by __init__()
libXext_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libXext = "libXext.so.6"


# Relative path to `libxcb_res`
const libxcb_res_splitpath = ["lib", "libxcb-res.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libxcb_res_path = ""

# libxcb_res-specific global declaration
# This will be filled out by __init__()
libxcb_res_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libxcb_res = "libxcb-res.so.0"


# Relative path to `libxcb_shape`
const libxcb_shape_splitpath = ["lib", "libxcb-shape.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libxcb_shape_path = ""

# libxcb_shape-specific global declaration
# This will be filled out by __init__()
libxcb_shape_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libxcb_shape = "libxcb-shape.so.0"


# Relative path to `libxcb_composite`
const libxcb_composite_splitpath = ["lib", "libxcb-composite.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libxcb_composite_path = ""

# libxcb_composite-specific global declaration
# This will be filled out by __init__()
libxcb_composite_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libxcb_composite = "libxcb-composite.so.0"


# Relative path to `libxcb_dri3`
const libxcb_dri3_splitpath = ["lib", "libxcb-dri3.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libxcb_dri3_path = ""

# libxcb_dri3-specific global declaration
# This will be filled out by __init__()
libxcb_dri3_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libxcb_dri3 = "libxcb-dri3.so.0"


# Relative path to `libxcb_render`
const libxcb_render_splitpath = ["lib", "libxcb-render.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libxcb_render_path = ""

# libxcb_render-specific global declaration
# This will be filled out by __init__()
libxcb_render_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libxcb_render = "libxcb-render.so.0"


# Relative path to `libXrender`
const libXrender_splitpath = ["lib", "libXrender.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libXrender_path = ""

# libXrender-specific global declaration
# This will be filled out by __init__()
libXrender_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libXrender = "libXrender.so.1"


# Relative path to `libX11_xcb`
const libX11_xcb_splitpath = ["lib", "libX11-xcb.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libX11_xcb_path = ""

# libX11_xcb-specific global declaration
# This will be filled out by __init__()
libX11_xcb_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libX11_xcb = "libX11-xcb.so.1"


# Relative path to `libxcb_xinput`
const libxcb_xinput_splitpath = ["lib", "libxcb-xinput.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libxcb_xinput_path = ""

# libxcb_xinput-specific global declaration
# This will be filled out by __init__()
libxcb_xinput_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libxcb_xinput = "libxcb-xinput.so.0"


# Relative path to `libXinerama`
const libXinerama_splitpath = ["lib", "libXinerama.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libXinerama_path = ""

# libXinerama-specific global declaration
# This will be filled out by __init__()
libXinerama_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libXinerama = "libXinerama.so.1"


# Relative path to `libxcb_xkb`
const libxcb_xkb_splitpath = ["lib", "libxcb-xkb.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libxcb_xkb_path = ""

# libxcb_xkb-specific global declaration
# This will be filled out by __init__()
libxcb_xkb_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libxcb_xkb = "libxcb-xkb.so.1"


# Relative path to `libXrandr`
const libXrandr_splitpath = ["lib", "libXrandr.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libXrandr_path = ""

# libXrandr-specific global declaration
# This will be filled out by __init__()
libXrandr_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libXrandr = "libXrandr.so.2"


# Relative path to `libxcb_xfixes`
const libxcb_xfixes_splitpath = ["lib", "libxcb-xfixes.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libxcb_xfixes_path = ""

# libxcb_xfixes-specific global declaration
# This will be filled out by __init__()
libxcb_xfixes_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libxcb_xfixes = "libxcb-xfixes.so.0"


# Relative path to `libXcomposite`
const libXcomposite_splitpath = ["lib", "libXcomposite.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libXcomposite_path = ""

# libXcomposite-specific global declaration
# This will be filled out by __init__()
libXcomposite_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libXcomposite = "libXcomposite.so.1"


# Relative path to `libxcb_record`
const libxcb_record_splitpath = ["lib", "libxcb-record.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libxcb_record_path = ""

# libxcb_record-specific global declaration
# This will be filled out by __init__()
libxcb_record_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libxcb_record = "libxcb-record.so.0"


# Relative path to `libXtst`
const libXtst_splitpath = ["lib", "libXtst.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libXtst_path = ""

# libXtst-specific global declaration
# This will be filled out by __init__()
libXtst_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libXtst = "libXtst.so.6"


# Relative path to `libxcb_shm`
const libxcb_shm_splitpath = ["lib", "libxcb-shm.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libxcb_shm_path = ""

# libxcb_shm-specific global declaration
# This will be filled out by __init__()
libxcb_shm_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libxcb_shm = "libxcb-shm.so.0"


# Relative path to `libxcb_xinerama`
const libxcb_xinerama_splitpath = ["lib", "libxcb-xinerama.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libxcb_xinerama_path = ""

# libxcb_xinerama-specific global declaration
# This will be filled out by __init__()
libxcb_xinerama_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libxcb_xinerama = "libxcb-xinerama.so.0"


# Relative path to `libXfixes`
const libXfixes_splitpath = ["lib", "libXfixes.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libXfixes_path = ""

# libXfixes-specific global declaration
# This will be filled out by __init__()
libXfixes_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libXfixes = "libXfixes.so.3"


"""
Open all libraries
"""
function __init__()
    global prefix = abspath(joinpath(@__DIR__, ".."))

    # Initialize PATH and LIBPATH environment variable listings
    global PATH_list, LIBPATH_list
    global libxcb_glx_path = abspath(joinpath(artifact"X11", libxcb_glx_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libxcb_glx_handle = dlopen(libxcb_glx_path)
    push!(LIBPATH_list, dirname(libxcb_glx_path))

    global libxshmfence_path = abspath(joinpath(artifact"X11", libxshmfence_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libxshmfence_handle = dlopen(libxshmfence_path)
    push!(LIBPATH_list, dirname(libxshmfence_path))

    global libxcb_path = abspath(joinpath(artifact"X11", libxcb_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libxcb_handle = dlopen(libxcb_path)
    push!(LIBPATH_list, dirname(libxcb_path))

    global libxcb_dpms_path = abspath(joinpath(artifact"X11", libxcb_dpms_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libxcb_dpms_handle = dlopen(libxcb_dpms_path)
    push!(LIBPATH_list, dirname(libxcb_dpms_path))

    global libxcb_xf86dri_path = abspath(joinpath(artifact"X11", libxcb_xf86dri_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libxcb_xf86dri_handle = dlopen(libxcb_xf86dri_path)
    push!(LIBPATH_list, dirname(libxcb_xf86dri_path))

    global libxcb_screensaver_path = abspath(joinpath(artifact"X11", libxcb_screensaver_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libxcb_screensaver_handle = dlopen(libxcb_screensaver_path)
    push!(LIBPATH_list, dirname(libxcb_screensaver_path))

    global libX11_path = abspath(joinpath(artifact"X11", libX11_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libX11_handle = dlopen(libX11_path)
    push!(LIBPATH_list, dirname(libX11_path))

    global libXcursor_path = abspath(joinpath(artifact"X11", libXcursor_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libXcursor_handle = dlopen(libXcursor_path)
    push!(LIBPATH_list, dirname(libXcursor_path))

    global libxcb_xtest_path = abspath(joinpath(artifact"X11", libxcb_xtest_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libxcb_xtest_handle = dlopen(libxcb_xtest_path)
    push!(LIBPATH_list, dirname(libxcb_xtest_path))

    global libxcb_randr_path = abspath(joinpath(artifact"X11", libxcb_randr_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libxcb_randr_handle = dlopen(libxcb_randr_path)
    push!(LIBPATH_list, dirname(libxcb_randr_path))

    global libxcb_dri2_path = abspath(joinpath(artifact"X11", libxcb_dri2_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libxcb_dri2_handle = dlopen(libxcb_dri2_path)
    push!(LIBPATH_list, dirname(libxcb_dri2_path))

    global libxcb_xvmc_path = abspath(joinpath(artifact"X11", libxcb_xvmc_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libxcb_xvmc_handle = dlopen(libxcb_xvmc_path)
    push!(LIBPATH_list, dirname(libxcb_xvmc_path))

    global libxcb_xv_path = abspath(joinpath(artifact"X11", libxcb_xv_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libxcb_xv_handle = dlopen(libxcb_xv_path)
    push!(LIBPATH_list, dirname(libxcb_xv_path))

    global libXau_path = abspath(joinpath(artifact"X11", libXau_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libXau_handle = dlopen(libXau_path)
    push!(LIBPATH_list, dirname(libXau_path))

    global libXi_path = abspath(joinpath(artifact"X11", libXi_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libXi_handle = dlopen(libXi_path)
    push!(LIBPATH_list, dirname(libXi_path))

    global libXdamage_path = abspath(joinpath(artifact"X11", libXdamage_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libXdamage_handle = dlopen(libXdamage_path)
    push!(LIBPATH_list, dirname(libXdamage_path))

    global libxcb_present_path = abspath(joinpath(artifact"X11", libxcb_present_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libxcb_present_handle = dlopen(libxcb_present_path)
    push!(LIBPATH_list, dirname(libxcb_present_path))

    global libxcb_sync_path = abspath(joinpath(artifact"X11", libxcb_sync_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libxcb_sync_handle = dlopen(libxcb_sync_path)
    push!(LIBPATH_list, dirname(libxcb_sync_path))

    global libxcb_damage_path = abspath(joinpath(artifact"X11", libxcb_damage_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libxcb_damage_handle = dlopen(libxcb_damage_path)
    push!(LIBPATH_list, dirname(libxcb_damage_path))

    global libXext_path = abspath(joinpath(artifact"X11", libXext_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libXext_handle = dlopen(libXext_path)
    push!(LIBPATH_list, dirname(libXext_path))

    global libxcb_res_path = abspath(joinpath(artifact"X11", libxcb_res_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libxcb_res_handle = dlopen(libxcb_res_path)
    push!(LIBPATH_list, dirname(libxcb_res_path))

    global libxcb_shape_path = abspath(joinpath(artifact"X11", libxcb_shape_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libxcb_shape_handle = dlopen(libxcb_shape_path)
    push!(LIBPATH_list, dirname(libxcb_shape_path))

    global libxcb_composite_path = abspath(joinpath(artifact"X11", libxcb_composite_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libxcb_composite_handle = dlopen(libxcb_composite_path)
    push!(LIBPATH_list, dirname(libxcb_composite_path))

    global libxcb_dri3_path = abspath(joinpath(artifact"X11", libxcb_dri3_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libxcb_dri3_handle = dlopen(libxcb_dri3_path)
    push!(LIBPATH_list, dirname(libxcb_dri3_path))

    global libxcb_render_path = abspath(joinpath(artifact"X11", libxcb_render_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libxcb_render_handle = dlopen(libxcb_render_path)
    push!(LIBPATH_list, dirname(libxcb_render_path))

    global libXrender_path = abspath(joinpath(artifact"X11", libXrender_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libXrender_handle = dlopen(libXrender_path)
    push!(LIBPATH_list, dirname(libXrender_path))

    global libX11_xcb_path = abspath(joinpath(artifact"X11", libX11_xcb_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libX11_xcb_handle = dlopen(libX11_xcb_path)
    push!(LIBPATH_list, dirname(libX11_xcb_path))

    global libxcb_xinput_path = abspath(joinpath(artifact"X11", libxcb_xinput_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libxcb_xinput_handle = dlopen(libxcb_xinput_path)
    push!(LIBPATH_list, dirname(libxcb_xinput_path))

    global libXinerama_path = abspath(joinpath(artifact"X11", libXinerama_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libXinerama_handle = dlopen(libXinerama_path)
    push!(LIBPATH_list, dirname(libXinerama_path))

    global libxcb_xkb_path = abspath(joinpath(artifact"X11", libxcb_xkb_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libxcb_xkb_handle = dlopen(libxcb_xkb_path)
    push!(LIBPATH_list, dirname(libxcb_xkb_path))

    global libXrandr_path = abspath(joinpath(artifact"X11", libXrandr_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libXrandr_handle = dlopen(libXrandr_path)
    push!(LIBPATH_list, dirname(libXrandr_path))

    global libxcb_xfixes_path = abspath(joinpath(artifact"X11", libxcb_xfixes_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libxcb_xfixes_handle = dlopen(libxcb_xfixes_path)
    push!(LIBPATH_list, dirname(libxcb_xfixes_path))

    global libXcomposite_path = abspath(joinpath(artifact"X11", libXcomposite_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libXcomposite_handle = dlopen(libXcomposite_path)
    push!(LIBPATH_list, dirname(libXcomposite_path))

    global libxcb_record_path = abspath(joinpath(artifact"X11", libxcb_record_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libxcb_record_handle = dlopen(libxcb_record_path)
    push!(LIBPATH_list, dirname(libxcb_record_path))

    global libXtst_path = abspath(joinpath(artifact"X11", libXtst_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libXtst_handle = dlopen(libXtst_path)
    push!(LIBPATH_list, dirname(libXtst_path))

    global libxcb_shm_path = abspath(joinpath(artifact"X11", libxcb_shm_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libxcb_shm_handle = dlopen(libxcb_shm_path)
    push!(LIBPATH_list, dirname(libxcb_shm_path))

    global libxcb_xinerama_path = abspath(joinpath(artifact"X11", libxcb_xinerama_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libxcb_xinerama_handle = dlopen(libxcb_xinerama_path)
    push!(LIBPATH_list, dirname(libxcb_xinerama_path))

    global libXfixes_path = abspath(joinpath(artifact"X11", libXfixes_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libXfixes_handle = dlopen(libXfixes_path)
    push!(LIBPATH_list, dirname(libXfixes_path))

    # Filter out duplicate and empty entries in our PATH and LIBPATH entries
    filter!(!isempty, unique!(PATH_list))
    filter!(!isempty, unique!(LIBPATH_list))
    global PATH = join(PATH_list, ':')
    global LIBPATH = join(LIBPATH_list, ':')

    # Add each element of LIBPATH to our DL_LOAD_PATH (necessary on platforms
    # that don't honor our "already opened" trick)
    #for lp in LIBPATH_list
    #    push!(DL_LOAD_PATH, lp)
    #end
end  # __init__()

